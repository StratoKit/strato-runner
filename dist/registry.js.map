{"version":3,"sources":["../src/registry.js"],"names":["dbg","registry","registerPlugin","name","plugin","Error","prev","version","registerPlugins","plugins","forceName","Array","isArray","p","then","Object","keys","JSON","stringify","babel","transpilePlugins","options","pluginsPath","require","resolve","err","code","process","cwd","userPlugins","default"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,MAAM,qBAAM,oBAAN,CAAZ;AACA,MAAMC,WAAW,EAAjB;;AAEA,MAAMC,iBAAiB,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACxC,KAAID,SAAS,SAAb,EAAwB;AACvB,QAAM,IAAIE,KAAJ,CAAU,qCAAV,CAAN;AACA;AACD,OAAMC,OAAOL,SAASE,IAAT,CAAb;AACA,KAAIG,IAAJ,EAAU;AACT;AACA,MAAIA,KAAKC,OAAL,KAAiBH,OAAOG,OAA5B,EACC,MAAM,IAAIF,KAAJ,CACJ,WAAUF,IAAK,2BAA0BG,KAAKC,OAAQ,QAAOH,OAAOG,OAAQ,EADxE,CAAN;AAGD;AACA;AACDP,KAAK,uBAAsBG,IAAK,GAAhC;AACAF,UAASE,IAAT,IAAiBC,MAAjB;AACA,CAfD;AAgBO,MAAMI,4CAAkB,CAACC,OAAD,EAAUC,SAAV,KAAwB;AACtD,KAAI,CAACD,OAAL,EAAc;AACd,KAAIE,MAAMC,OAAN,CAAcH,OAAd,CAAJ,EAA4B;AAC3B,OAAK,MAAMI,CAAX,IAAgBJ,OAAhB,EAAyB;AACxBD,mBAAgBK,CAAhB;AACA;AACD,EAJD,MAIO,IAAI,OAAOJ,QAAQN,IAAf,KAAwB,QAA5B,EAAsC;AAC5C;AACA;AACAD,iBAAeQ,aAAaD,QAAQN,IAApC,EAA0CM,OAA1C;AACA,EAJM,MAIA,IAAI,OAAOA,QAAQK,IAAf,KAAwB,UAA5B,EAAwC;AAC9C;AACA,MAAIJ,SAAJ,EAAe;AACdR,kBAAeQ,SAAf,EAA0BD,OAA1B;AACA,GAFD,MAEO;AACN,SAAM,IAAIJ,KAAJ,CACL,6FADK,CAAN;AAGA;AACD,EATM,MASA,IAAI,OAAOI,OAAP,KAAmB,QAAvB,EAAiC;AACvC,OAAK,MAAMN,IAAX,IAAmBY,OAAOC,IAAP,CAAYP,OAAZ,CAAnB,EAAyC;AACxCD,mBAAgBC,QAAQN,IAAR,CAAhB,EAA+BA,IAA/B;AACA;AACD,EAJM,MAIA;AACN,QAAM,IAAIE,KAAJ,CAAW,8BAA6BY,KAAKC,SAAL,CAAeT,OAAf,CAAwB,EAAhE,CAAN;AACA;AACD,CA1BM;;AA4BP;AACA;AACA,IAAI,iBAAOU,KAAP,CAAaC,gBAAjB,EAAmC;AAClC,+BAAe,iBAAOD,KAAP,CAAaE,OAA5B;AACA;;AAED;AACA;AACA,IAAIC,WAAJ;;AAEA,IAAI;AACHA,eAAcC,QAAQC,OAAR,CAAgB,oBAAhB,CAAd;AACA,CAFD,CAEE,OAAOC,GAAP,EAAY;AACb,KAAIA,IAAIC,IAAJ,KAAa,kBAAjB,EAAqC,MAAMD,GAAN;;AAErC,KAAI;AACHH,gBAAcC,QAAQC,OAAR,CAAgBG,QAAQC,GAAR,KAAgB,UAAhC,CAAd;AACA,EAFD,CAEE,OAAOH,GAAP,EAAY;AACb,MAAIA,IAAIC,IAAJ,KAAa,kBAAjB,EAAqC,MAAMD,GAAN;AACrC;AACD;;AAED,IAAIH,WAAJ,EAAiB;AAChBtB,KAAK,wBAAuBsB,WAAY,EAAxC;AACA,OAAMO,cAAcN,QAAQD,WAAR,CAApB;AACAd,iBAAiBqB,eAAeA,YAAYC,OAA5B,IAAwCD,WAAxD;AACA;;kBAEc5B,Q","file":"registry.js","sourcesContent":["import debug from 'debug'\nimport config from './config'\nimport startTranspile from './transpile/startTranspile'\n\nconst dbg = debug('stratokit/registry')\nconst registry = {}\n\nconst registerPlugin = (name, plugin) => {\n\tif (name === 'default') {\n\t\tthrow new Error('\"default\" is a reserved plugin name')\n\t}\n\tconst prev = registry[name]\n\tif (prev) {\n\t\t// this doesn't work for promises, ah well\n\t\tif (prev.version !== plugin.version)\n\t\t\tthrow new Error(\n\t\t\t\t`Plugin \"${name}\" is registered twice, v${prev.version} vs v${plugin.version}`\n\t\t\t)\n\t\treturn\n\t}\n\tdbg(`registering plugin '${name}'`)\n\tregistry[name] = plugin\n}\nexport const registerPlugins = (plugins, forceName) => {\n\tif (!plugins) return\n\tif (Array.isArray(plugins)) {\n\t\tfor (const p of plugins) {\n\t\t\tregisterPlugins(p)\n\t\t}\n\t} else if (typeof plugins.name === 'string') {\n\t\t// Plugin\n\t\t// TODO verify other keys, share code with configure promised\n\t\tregisterPlugin(forceName || plugins.name, plugins)\n\t} else if (typeof plugins.then === 'function') {\n\t\t// Promise for plugin\n\t\tif (forceName) {\n\t\t\tregisterPlugin(forceName, plugins)\n\t\t} else {\n\t\t\tthrow new Error(\n\t\t\t\t'Can only use a Promise for a plugin in {pluginName: <Promise for plugin \"pluginName\">} form'\n\t\t\t)\n\t\t}\n\t} else if (typeof plugins === 'object') {\n\t\tfor (const name of Object.keys(plugins)) {\n\t\t\tregisterPlugins(plugins[name], name)\n\t\t}\n\t} else {\n\t\tthrow new Error(`Not a plugin registration: ${JSON.stringify(plugins)}`)\n\t}\n}\n\n// TODO under webpack, expect user plugin registry in global\n// TODO use NODE_CONFIG_DIR like confippet does\nif (config.babel.transpilePlugins) {\n\tstartTranspile(config.babel.options)\n}\n\n// Optionally, the user can require plugins in `/plugins`\n// If under webpack, this is aliased to _stratokit_plugins\nlet pluginsPath\n\ntry {\n\tpluginsPath = require.resolve('_stratokit_plugins')\n} catch (err) {\n\tif (err.code !== 'MODULE_NOT_FOUND') throw err\n\n\ttry {\n\t\tpluginsPath = require.resolve(process.cwd() + '/plugins')\n\t} catch (err) {\n\t\tif (err.code !== 'MODULE_NOT_FOUND') throw err\n\t}\n}\n\nif (pluginsPath) {\n\tdbg(`loading plugins from ${pluginsPath}`)\n\tconst userPlugins = require(pluginsPath)\n\tregisterPlugins((userPlugins && userPlugins.default) || userPlugins)\n}\n\nexport default registry\n"]}