{"version":3,"sources":["../src/registry.js"],"names":["dbg","registry","registerPlugin","name","plugin","Error","prev","version","registerPlugins","plugins","forceName","Array","isArray","p","then","Object","keys","JSON","stringify","config","babel","transpilePlugins","options","pluginsPath","require","resolve","err","code","process","cwd","userPlugins","default"],"mappings":"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","sourcesContent":["import debug from 'debug'\nimport config from './config'\nimport startTranspile from './transpile/startTranspile'\n\nconst dbg = debug('stratokit/registry')\nconst registry = {}\n\nconst registerPlugin = (name, plugin) => {\n\tif (name === 'default') {\n\t\tthrow new Error('\"default\" is a reserved plugin name')\n\t}\n\tconst prev = registry[name]\n\tif (prev) {\n\t\t// this doesn't work for promises, ah well\n\t\tif (prev.version !== plugin.version)\n\t\t\tthrow new Error(\n\t\t\t\t`Plugin \"${name}\" is registered twice, v${prev.version} vs v${plugin.version}`\n\t\t\t)\n\t\treturn\n\t}\n\tdbg(`registering plugin '${name}'`)\n\tregistry[name] = plugin\n}\nexport const registerPlugins = (plugins, forceName) => {\n\tif (!plugins) return\n\tif (Array.isArray(plugins)) {\n\t\tfor (const p of plugins) {\n\t\t\tregisterPlugins(p)\n\t\t}\n\t} else if (typeof plugins.name === 'string') {\n\t\t// Plugin\n\t\t// TODO verify other keys, share code with configure promised\n\t\tregisterPlugin(forceName || plugins.name, plugins)\n\t} else if (typeof plugins.then === 'function') {\n\t\t// Promise for plugin\n\t\tif (forceName) {\n\t\t\tregisterPlugin(forceName, plugins)\n\t\t} else {\n\t\t\tthrow new Error(\n\t\t\t\t'Can only use a Promise for a plugin in {pluginName: <Promise for plugin \"pluginName\">} form'\n\t\t\t)\n\t\t}\n\t} else if (typeof plugins === 'object') {\n\t\tfor (const name of Object.keys(plugins)) {\n\t\t\tregisterPlugins(plugins[name], name)\n\t\t}\n\t} else {\n\t\tthrow new Error(`Not a plugin registration: ${JSON.stringify(plugins)}`)\n\t}\n}\n\n// TODO under webpack, expect user plugin registry in global\n// TODO use NODE_CONFIG_DIR like confippet does\nif (config.babel.transpilePlugins) {\n\tstartTranspile(config.babel.options)\n}\n\n// Optionally, the user can require plugins in `/plugins`\n// If under webpack, this is aliased to _stratokit_plugins\nlet pluginsPath\n\ntry {\n\tpluginsPath = require.resolve('_stratokit_plugins')\n} catch (err) {\n\tif (err.code !== 'MODULE_NOT_FOUND') throw err\n\n\ttry {\n\t\tpluginsPath = require.resolve(process.cwd() + '/plugins')\n\t} catch (err) {\n\t\tif (err.code !== 'MODULE_NOT_FOUND') throw err\n\t}\n}\n\nif (pluginsPath) {\n\tdbg(`loading plugins from ${pluginsPath}`)\n\tconst userPlugins = require(pluginsPath)\n\tregisterPlugins((userPlugins && userPlugins.default) || userPlugins)\n}\n\nexport default registry\n"],"file":"registry.js"}